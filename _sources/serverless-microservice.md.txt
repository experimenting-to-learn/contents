# Serverless Microservice 개발 환경 구축과 개발 생산성

## 비즈니스 관점에서 Serverless 와 Microservice

'Serverless'나 'Microservice'와 같은 주제에 대해서 구현이나 기술적인 활용 관점한 이야기는 이 문서에서 다루려고 하는 핵심이 아니다. 기술적인 효율을 취하는 것은 언제나 중요한 일이지만 활용에 따른 효과를 극대화 하기 위해서는 우선 왜 해야 하는지에 대해서 명확히 정의 할 필요가 있다. 왜 하는지에 따라서 어떻게 할지 결정할 수 있다.   
이유는 단순 했다. 우리 팀은 PoC 수행을 통해 본격적인 구현 단계에 진입하기 전에 여러가지 가설들에 대한 백 데이터가 필요했고, MVP 구현을 통해 내부 이해당사자나 또는 불특정 사용자에게도 우리 아이디어를 노출시켜 피드백을 수집해야 하는 일이 많았다. 요약하자면 빠르고 효율적이어야 했다. 한가지 강조하고 싶은 것은 구현하는 것 자체가 목적이 아니라 구현체를 통해서 아이디어에 대한 데이터를 확보하는 것이 진짜 목적이라는 것이다.   
이러한 작업의 반복은 생각보다 유쾌하지 않다. 단순한 기능이 아니라 아주 좁은 범위 일지라도 비즈니스 시나리오를 실행시켜야 했다. 유의미한 데이터를 확보하기 위해서는 시장에서의 비교 우위를 주장할 수 있을 정도는 아니더라도 일반 사용자들이 일정 시간 머물면서 써볼 수 있을 정도는 돼야 했다. 트래픽이 어느정도 발생해야 데이터에 대한 해석이 가치가 있게 되는 경우들도 있기에 특정 목적의 마케팅이나 홍보 같은 활동을 진행할 수 있도록 시스템이 지속적으로 운영돼야 했다. 클라우드 컴퓨팅 서비스를 전략적으로 활용 했고 가용성이나 성능에 대한 고려를 최소화 했지만 비용은 무시할 수 있는 수준이 아니었다.   
이미 알려진 많은 성공 사례에서 민첩하게 비즈니스를 서포트하는 시스템을 어떻게 개발하면 좋은지에 대해서 이야기하고 있지만, 잘 생각해 보면 그런 이야기들은 성공했기 때문에 성립되는 논리 인 경우가 많다. 현실은 아이디어를 아무리 잘 구현해서 치열한 논의 끝에 결정한 우리 브랜드의 도메인에 연결시켜 공개해도 아무일도 일어나지 않는다는 것이다. 팀 내부의 여러 가설을 증명하기 위해 테스트용 트래픽을 발생시키는 또 다른 개발을 하거나, 계속 쏟아져 나오는 여러 개발 및 운영 도구들을 찾아보면서 어떻게 적용시켜야 할지를 고민하면서 스크립트를 작성해야 한다.   
그래서 필요한 것은 시간이다. 필요한 구현체를 더 빨리 만들어내고, 또 필요한 무언가를 해야 할 시간 동안 발생하는 비용을 줄이면 무언가를 할 수 있는 시간이 생긴다.   
   
이 문제에 대한 대안으로 생각한 것이 PoC 혹은 MVP 구현에는 사용량 기반 과금 정책의 서비스를 최대한 활용하는 것이었고, 그 중 하나가 Serverless 라는 키워드이다. 그리고 이렇게 구현 해 놓은 상태에서 사용하기 전까지 계속 유지할 수 있다면 필요한 기능들을 Microservice 로 잘 설계해서 재사용 하는 것이다. 서버를 계속 유지할 수 없는 환경에서는 소스코드 레포지토리에서 다시 해당 부분을 복사하거나 패키지를 불러왔어야 했지만 Serverless 서비스에 배포된 Microservice 를 호출하는 방식으로 바뀌는 것이다.