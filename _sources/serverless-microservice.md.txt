# Serverless Microservice 개발 환경 구축과 개발 생산성

## 생산성 관점에서 Serverless 와 Microservice

'Serverless'나 'Microservice'와 같은 주제에 대해서 구현이나 기술적인 활용 관점한 이야기는 이 문서에서 다루려고 하는 핵심이 아니다. 기술적인 효율을 취하는 것은 언제나 중요한 일이지만 활용에 따른 효과를 극대화 하기 위해서는 우선 왜 해야 하는지에 대해서 명확히 정의 할 필요가 있다. 왜 하는지에 따라서 어떻게 할지 결정할 수 있다.   
이유는 단순 했다. 우리 팀은 PoC 수행을 통해 본격적인 구현 단계에 진입하기 전에 여러가지 가설들에 대한 백 데이터가 필요했고, MVP 구현을 통해 내부 이해당사자나 또는 불특정 사용자에게도 우리 아이디어를 노출시켜 피드백을 수집해야 하는 일이 많았다. 요약하자면 빠르고 효율적이어야 했다. 한가지 강조하고 싶은 것은 구현하는 것 자체가 목적이 아니라 구현체를 통해서 아이디어에 대한 데이터를 확보하는 것이 진짜 목적이라는 것이다.   
이러한 작업의 반복은 생각보다 유쾌하지 않다. 단순한 기능이 아니라 아주 좁은 범위 일지라도 비즈니스 시나리오를 실행시켜야 했다. 유의미한 데이터를 확보하기 위해서는 시장에서의 비교 우위를 주장할 수 있을 정도는 아니더라도 일반 사용자들이 일정 시간 머물면서 써볼 수 있을 정도는 돼야 했다. 트래픽이 어느정도 발생해야 데이터에 대한 해석이 가치가 있게 되는 경우들도 있기에 특정 목적의 마케팅이나 홍보 같은 활동을 진행할 수 있도록 시스템이 지속적으로 운영돼야 했다. 클라우드 컴퓨팅 서비스를 전략적으로 활용 했고 가용성이나 성능에 대한 고려를 최소화 했지만 비용은 무시할 수 있는 수준이 아니었다.   
이미 알려진 많은 성공 사례에서 민첩하게 비즈니스를 서포트하는 시스템을 어떻게 개발하면 좋은지에 대해서 이야기하고 있지만, 잘 생각해 보면 그런 이야기들은 성공했기 때문에 성립되는 논리 인 경우가 많다. 현실은 아이디어를 아무리 잘 구현해서 치열한 논의 끝에 결정한 우리 브랜드의 도메인에 연결시켜 공개해도 아무일도 일어나지 않는다는 것이다. 팀 내부의 여러 가설을 증명하기 위해 테스트용 트래픽을 발생시키는 또 다른 개발을 하거나, 계속 쏟아져 나오는 여러 개발 및 운영 도구들을 찾아보면서 어떻게 적용시켜야 할지를 고민하면서 스크립트를 작성해야 한다.   
그래서 필요한 것은 시간이다. 필요한 구현체를 더 빨리 만들어내고, 또 필요한 무언가를 해야 할 시간 동안 발생하는 비용을 줄이면 무언가를 할 수 있는 시간이 생긴다.   
   
이 문제에 대한 대안으로 생각한 것이 PoC 혹은 MVP 구현에는 사용량 기반 과금 정책 서비스를 최대한 활용하는 것이었고, 그 중 하나가 Serverless 라는 키워드이다. 그리고 이렇게 구현 해 놓은 상태에서 사용하기 전까지 계속 유지할 수 있다면 필요한 기능들을 Microservice 로 잘 설계해서 재사용 하는 것이다. 서버를 계속 유지할 수 없는 환경에서는 소스코드 레포지토리에서 다시 해당 부분을 복사하거나 패키지를 불러왔어야 했지만 Serverless 서비스에 배포된 Microservice 를 호출하는 방식으로 바뀌는 것이다.


## AWS Lambda (Function) 그리고 Microservice
Serverless 방식의 구현체에 대한 방향을 정하고 가장 먼저 떠오른 선택 사항은 AWS Lambda 였다. 사용량 단위의 과금 정책과 다양한 언어를 지원하며, AWS 서비스들과 유기적인 통합이 가능한 이 컴포넌트는 단연 높은 우선순위를 부여 할 만하다. 다만 고민해야 할 의문은 Function 단위로 비즈니스 로직을 구현하고 관리하는 것이 팀의 목표에 부합하는지에 대한 것이었다. 경험적으로 우리가 주로 개발하는 비즈니스 로직은 규모가 크지 않지만 단순하지 않다. 많은 경우에 우리가 Spring Boot Framework 를 선택했던 이유이다. 팀의 경험과 노하우를 유지하면서, 즉 생산성을 떨어트리지 않으면서 Serverless 방식을 도입하기 위해서 AWS Lambda 라는 서비스가 제공하는 runtime 에 Microservice 개념의 구현체를 올려서 시스템을 디자인 했다. Spring 프로젝트의 여러 내부 프로젝트 중 하나인 [Spring Cloud Function](https://docs.spring.io/spring-cloud-function/docs/current/reference/html/spring-cloud-function.html#_function_routing_and_filtering)은 Framework 수준에서 우리의 결정을 지원해줄 수 있는 기능이라고 판단했다.   

Spring Boot Application 을 AWS Lambda 의 runtime 에서 구동시키는 구조에 대해서 팀 내부에서도 가장 먼저 성능에 대한 우려가 제기됐다. Spring Framework 에서 제공하는 견고한 Application Architecture 와 Dependency Injection 과 같은 유용한 기능들을 활용하기 위해서 어플리케이션이 실행되는 과정에서 피해갈 수 없는 초기화 작업들이 있고, AWS Lambda 와 같이 event 와 함께 함수가 실행되는 구조에서 이 부분은 치명적일 수 있다는 것이다. 성능에 대한 우려에 대해서는 여러가지 해결 방법들이 있다.   

* 모든 기능을 Spring Boot Application 으로 구현해야 하는 것은 아니다. 빠른 응답 속도가 필요하면서 단순한 기능은 별도로 Function 단위로 구현해서 통합할 수 있을 것이다.
* [Lambda SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) 와 같은 기능들을 활용해서 최적화 할 수 있는 여지가 있을 것이다.


## AWS CDK

